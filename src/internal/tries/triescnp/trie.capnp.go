// Code generated by capnpc-go. DO NOT EDIT.

package triescnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Entry capnp.Struct

// Entry_TypeID is the unique identifier for the type Entry.
const Entry_TypeID = 0x9fb6af56de709433

func NewEntry(s *capnp.Segment) (Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Entry(st), err
}

func NewRootEntry(s *capnp.Segment) (Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Entry(st), err
}

func ReadRootEntry(msg *capnp.Message) (Entry, error) {
	root, err := msg.Root()
	return Entry(root.Struct()), err
}

func (s Entry) String() string {
	str, _ := text.Marshal(0x9fb6af56de709433, capnp.Struct(s))
	return str
}

func (s Entry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Entry) DecodeFromPtr(p capnp.Ptr) Entry {
	return Entry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Entry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Entry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Entry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Entry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Entry) Key() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Entry) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Entry) SetKey(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Entry) Value() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Entry) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Entry) SetValue(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// Entry_List is a list of Entry.
type Entry_List = capnp.StructList[Entry]

// NewEntry creates a new list of Entry.
func NewEntry_List(s *capnp.Segment, sz int32) (Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Entry](l), err
}

// Entry_Future is a wrapper for a Entry promised by a client call.
type Entry_Future struct{ *capnp.Future }

func (f Entry_Future) Struct() (Entry, error) {
	p, err := f.Future.Ptr()
	return Entry(p.Struct()), err
}

type Node capnp.Struct

// Node_TypeID is the unique identifier for the type Node.
const Node_TypeID = 0xd7716cf897996ddc

func NewNode(s *capnp.Segment) (Node, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Node(st), err
}

func NewRootNode(s *capnp.Segment) (Node, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Node(st), err
}

func ReadRootNode(msg *capnp.Message) (Node, error) {
	root, err := msg.Root()
	return Node(root.Struct()), err
}

func (s Node) String() string {
	str, _ := text.Marshal(0xd7716cf897996ddc, capnp.Struct(s))
	return str
}

func (s Node) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Node) DecodeFromPtr(p capnp.Ptr) Node {
	return Node(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Node) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Node) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Node) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Node) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Node) Entries() (Entry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Entry_List(p.List()), err
}

func (s Node) HasEntries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Node) SetEntries(v Entry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Entry_List, preferring placement in s's segment.
func (s Node) NewEntries(n int32) (Entry_List, error) {
	l, err := NewEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Entry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Node_List is a list of Node.
type Node_List = capnp.StructList[Node]

// NewNode creates a new list of Node.
func NewNode_List(s *capnp.Segment, sz int32) (Node_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Node](l), err
}

// Node_Future is a wrapper for a Node promised by a client call.
type Node_Future struct{ *capnp.Future }

func (f Node_Future) Struct() (Node, error) {
	p, err := f.Future.Ptr()
	return Node(p.Struct()), err
}

type Index capnp.Struct

// Index_TypeID is the unique identifier for the type Index.
const Index_TypeID = 0xba9cf241dfa2755b

func NewIndex(s *capnp.Segment) (Index, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Index(st), err
}

func NewRootIndex(s *capnp.Segment) (Index, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Index(st), err
}

func ReadRootIndex(msg *capnp.Message) (Index, error) {
	root, err := msg.Root()
	return Index(root.Struct()), err
}

func (s Index) String() string {
	str, _ := text.Marshal(0xba9cf241dfa2755b, capnp.Struct(s))
	return str
}

func (s Index) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Index) DecodeFromPtr(p capnp.Ptr) Index {
	return Index(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Index) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Index) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Index) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Index) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Index) Ref() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Index) HasRef() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Index) SetRef(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Index) Count() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Index) SetCount(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Index) IsParent() bool {
	return capnp.Struct(s).Bit(64)
}

func (s Index) SetIsParent(v bool) {
	capnp.Struct(s).SetBit(64, v)
}

// Index_List is a list of Index.
type Index_List = capnp.StructList[Index]

// NewIndex creates a new list of Index.
func NewIndex_List(s *capnp.Segment, sz int32) (Index_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[Index](l), err
}

// Index_Future is a wrapper for a Index promised by a client call.
type Index_Future struct{ *capnp.Future }

func (f Index_Future) Struct() (Index, error) {
	p, err := f.Future.Ptr()
	return Index(p.Struct()), err
}

const schema_86dd963ad5de13d5 = "x\xda\\\x91\xcfj\x1aQ\x18\xc5\xcf\xf9\xeeX\x15;" +
	"\xc5a\\V\x8a\xc5B\xbb\xb0\xf4\xdf\xcaMm\xa9\x0b" +
	"\x8b-s7\xa5\xd0\x95\xe8-H\xedh\xc7\xb1\xad\x8b" +
	"RZH\x16\xaeCB \x10\xc8\x0b\xb8\xcb\"\xab\xbc" +
	"\x84d\x93\x98w\xc8*\xbb\x093\xa2I\xdc}\xf7\xf0" +
	"\xe3w\x0e\xdc\xfcq\xcdzn\xf7\x05\xa2\xef\xa7\xeeD" +
	"/\xb7\x06\xf3O\xd3\xc3}89F3w>\xabn" +
	"\x9fm\"%i\xc0-r\xe2>b|\x95\xf8\x0b\x8c" +
	"\xbe\x8c\x0e\xce\xdf\\\xec\x1dA\xe7(7\xe0\x04\xf9\xc3" +
	"\x89\xbb\x91\\\xff8\x05\xa3\xd3\xef\xbb;\x97\xbd\x1f'" +
	"k\xe2\x84(\xca\x7f\xb7\xb4\xa8\x90\xd7\xa8Da\xd05" +
	"O\xdb\xad\x01\xfdA\xb5\xee\x87\xc1\x18\xf0H\x9dQ\x16" +
	"`\x11p\x9e<\x04tYQ?\x13:d\x81qX" +
	"y\x01\xe8\xc7\x8a\xfa\x950\xfd\xcd\x8ciCh\x83\x0f" +
	"~\xb6z#\xb3|\xdd\x927\xfc\x8e\xf9\xbd\x90\xdf]" +
	"\xc9\xeb\xb1\xbc\xa6\xa8\x9b\xc2\xa5\xbb\x11\xbb\xdf)jO" +
	"\xe8H\xad@\x01\x9c\x0f\xef\x01\xddT\xd4\x9f\x85\xe9\xc0" +
	"|]\x15\xb6\xfb#?d\x16\xc2,\x18u\x87^+" +
	"0~\x08\x80\x84\x90k#>\xf6;&\x99`\xad&" +
	"\xd8o\x01\x9dQ\xd4e\xe1_\xe3\xc7\xf4\x90\xf7@O" +
	"\x91\xf9\xeb?\x02\xe3\xf0*\x00\x00\xff\xff\x96\x0fb\xa5"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_86dd963ad5de13d5,
		Nodes: []uint64{
			0x9fb6af56de709433,
			0xba9cf241dfa2755b,
			0xd7716cf897996ddc,
		},
		Compressed: true,
	})
}
