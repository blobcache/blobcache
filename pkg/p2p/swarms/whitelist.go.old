package swarms

import (
	"context"

	"github.com/brendoncarroll/blobcache/pkg/p2p"
)

type WhitelistSwarm struct {
	parent    p2p.Swarm
	whitelist map[p2p.PeerID]struct{}
}

func Whitelist(parent p2p.Swarm, whitelist []p2p.PeerID) *Swarm {
	return &Swarm{parent: parent}
}

func (s *WhitelistSwarm) Peer(peerID PeerID) Peer {
	if _, exists := s.whitelist[peerID]; !exists {
		return nil
	}
	return s.parent.Peer(peerID)
}

func (s *WhitelistSwarm) Peers() []PeerID {
	ids := []PeerID{}
	for _, id := range s.parent.Peers() {
		if s.isWhitelisted(id) {
			ids = append(ids, id)
		}
	}
	return ids
}

func (s *WhitelistSwarm) ServeAsks(ctx context.Context, ah AskHandler) error {
	return s.parent.ServeAsks(ctx, func(ctx context.Context, peerID PeerID, req []byte) ([]byte, error) {
		if !s.isWhitelisted(peerID) {
			return nil, nil
		}
		return ah(ctx, peerID, req)
	})
}

func (s *WhitelistSwarm) isWhitelisted(peerID PeerID) bool {
	_, exists := s.whitelist[peerID]
	return exists
}
